const express = require('express');
const bodyParser = require('body-parser');
const { spawn } = require('child_process');
const path = require('path');
const cors = require('cors');

const app = express();
const PORT = 3000;

// CORS 설정
app.use(cors());

// 정적 파일 제공 설정
app.use(express.static(path.join(__dirname, '/')));

// body-parser 설정
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// index.html 파일 제공
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// 키스트로크 데이터를 받아 예측 수행
app.post('/predict', (req, res) => {
    console.log('Received keystroke data:', req.body);
    const keystrokeData = req.body;

    if (!keystrokeData || !keystrokeData.intervals || keystrokeData.intervals.length === 0) {
        console.error('No valid keystroke data provided');
        return res.status(400).json({ error: 'No valid keystroke data provided', user: '알 수 없음' });
    }

    // Python 스크립트를 호출하여 예측 수행
    const pythonProcess = spawn('python3', [path.join(__dirname, 'predict_transformer.py')]);

    // 표준 입력으로 키스트로크 데이터를 Python 스크립트로 전달
    pythonProcess.stdin.write(JSON.stringify(keystrokeData));
    pythonProcess.stdin.end();

    let predictedUser = '';
    pythonProcess.stdout.on('data', (data) => {
        console.log('Python script output:', data.toString());
        predictedUser += data.toString();
    });

    pythonProcess.stderr.on('data', (data) => {
        console.error(`Python script stderr: ${data}`);
    });

    pythonProcess.on('close', (code) => {
        console.log(`Python script exited with code ${code}`);
        if (code !== 0) {
            console.error('Python script execution failed');
            return res.status(500).json({ error: 'Prediction failed', user: '알 수 없음' });
        }
        console.log('Predicted user:', predictedUser.trim());
        res.json({ user: predictedUser.trim() });
    });
});

// 서버 실행
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
